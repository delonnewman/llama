#+title: Notes

* Base
** Class
*** Enum
*** Union
*** Record
*** Role

* Type
** Protocol
- Signature
  - Value::Type
- Attribute
  - Attribute::Type
    - Value::Type
** Value::Type
** Attribute::Type

* Collections
** Enumerable (Role)
** Associative (Role)
** Pair
** Cons
** List
** LazyList
** Dictionary

* Base::Hash
** Entity (mutable heterogenous data)
** Record (immutable heterogenous data)
** Dictionary is Enumerable (mutable homogenous key/value lookup)

* Base::Array
** Vector is Enumerable (immutable indexed)

* Macros
** Attributes
** Delegation

* Prelude

* TODO Make Enum::Member and Union::Member subclasses of Class *(perhaps use Union::Member as the class type for Enum::Member)
** Override eigen_class should just be an alias for class
** Add convienices for using class attributes as meta data

* References
** Types & Contracts
https://theweeklychallenge.org/blog/unary-operator/
https://blogs.perl.org/users/leon_timmermans/2025/02/a-deep-dive-into-the-perl-type-systems.html
https://docs.racket-lang.org/reference/contracts.html
https://docs.racket-lang.org/guide/contract-boundaries.html
https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(algebraic_data_type)

** Concurrency
http://cml.cs.uchicago.edu
https://wingolog.org/archives/2017/06/29/a-new-concurrent-ml
https://en.wikipedia.org/wiki/Concurrent_ML
